exit
node
cur_char
s
cur_pos
s
cur_pos
s
cur_char
s
cur_pos
s
value
str
node.middle
s
node
s
node
s
value
str
s
node.char
cur_char
s
str.length
cur_pos
s
node
exit
cur_pos
node
value
str
exit
pat[i] == pat[j]
j
p i
i
s
count
j
i
pos
pat
s
slen
self.suffix_length(pat, j)
c
self.suffix_length(pat, j)
j
c
self.suffix_length(pat, 3)
j
c
slen
s
chars
self.suffix_length(pat, 2)
self.suffix(pat, 2)
j
c
pat.length - 1 - 1 + 2
j
pat.length
slen
s
chars[2]
chars[slen]
display self.suffix_length(pat, j)
j
c
chars[slen]
slen
s
pat.length - 1
self.suffix_length(pat, 0)
j
exit
exis
self.is_suffix?(pat, 6)
self.is_suffix?(5, 6)
p i
i
exit
bct[str[k]]
gct[3]
pat.length - 1
j
k
s
str[k]
pat[j]
s
str[k]
pat[j]
s
pat[k]
pat[j]
pat[i]
s
k
j
exit
pat.length
pat
j
k
exit
j
p i
i
c
n
exit
pat
exit
str[i]
bct
gct[3]
pat.length - 1 - j
pat.length - 1
pat.length
s
exit
"T".ord
rolling_hash
s
rolling_hash
s
text[k - pattern_len].ord
text[k - pattern_len]
rolling_hash - 10
s
k
i
rolling_hash
s
rolling_hash
s
k
i
rolling_hash
s
rolling_hash
s
char
rolling_hash
s
pattern_len
k
exit
i
exit
s
text[a]
pattern[j]
s
pattern[j]
text[a]
s
text[a]
s
a
s
j
s
text[a]
s
j
s
pattern[j]
text[a]
a
j
s
pattern[j]
text[a]
s
j
s
pattern[j]
text[a]
j
a
s
a
s
text[a]
pattern[j]
a
s
j
s
pattern[j]
text[a]
a
s
a
j
s
j
s
a
s
pattern[j]
s
prefix_table[j - 1]
j
s
text[a]
pattern[j]
s
pattern[j]
text[a]
s
pattern[j]
text[a]
c
a
text[a]
c
text[a]
c
text[a]
n
display a
display j
exit
display j
display jj
display i
display a
show a
a
exit
s
prefix_table[j - 1]
prefix_table
s
j
s
last_jump
p j
p i
i
s
pattern[j]
text[i]
p j
p i
c
p i
i
j
